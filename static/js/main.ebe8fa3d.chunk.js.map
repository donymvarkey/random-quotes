{"version":3,"sources":["components/NavBar.js","components/Quotes.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","className","Quotes","useState","quote","setQuote","getQuote","axios","get","then","res","data","useEffect","style","width","tags","class","onClick","content","author","navigator","clipboard","writeText","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","err","error","createErrorToast","console","log","textArea","document","createElement","value","body","appendChild","focus","select","msg","execCommand","removeChild","title","href","target","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ebe8fa3d.chunk.js","sourcesContent":["import React from 'react'\nimport './style.css'\n\nexport default function NavBar() {\n    return (\n        <div>\n           <nav className=\"navbar bg-transparent\">\n                <div className=\"container-fluid\">\n                    <p className=\"navbar-brand fs-4 fw-bold font-white\">Random Quotes</p>\n                </div>\n            </nav>\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport default function Quotes() {\n    const url = \"https://api.quotable.io/random\";\n    const [quote, setQuote] = useState([]);\n\n    const getQuote = () => {\n        axios.get(url)\n         .then((res) => {\n             setQuote(res.data)\n         })\n    }\n\n    useEffect(() => {\n        getQuote();\n    }, [])\n\n    const getNewQuote = () =>{\n        getQuote()\n    }\n    const createSuccessToast = () => {\n        toast(\"Copied to clipboard ðŸ“‹\", {\n            position: \"top-center\",\n            autoClose: 2000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: false,\n            draggable: true,\n            progress: undefined,\n        })\n    }\n    const createErrorToast = (err) => {\n        toast.error(err, {\n            position: \"top-center\",\n            autoClose: 2000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: false,\n            draggable: true,\n            progress: undefined,\n        })\n    }\n    const copyToClipboard = () => {\n        const content = `${quote.content} -${quote.author}`;\n        if (typeof (navigator.clipboard) == 'undefined') {\n            console.log('navigator.clipboard');\n            var textArea = document.createElement(\"textarea\");\n            textArea.value = content;\n            textArea.style.position = \"fixed\";  //avoid scrolling to bottom\n            document.body.appendChild(textArea);\n            textArea.focus();\n            textArea.select();\n        \n            try {\n                var successful = document.execCommand('copy');\n                var msg = successful ? 'Copied to clipboard ðŸ“‹' : 'Unable to copy to clipboard';\n                toast(msg, {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                    });\n            } catch (err) {\n                toast(err, {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                    });\n            }\n        \n            document.body.removeChild(textArea)\n            return;\n        }\n        navigator.clipboard.writeText(content).then(function () {\n            createSuccessToast()\n        }, function (err) {\n            createErrorToast(err)\n        });\n        \n    }\n    return (\n        <div className=\"container\">\n            <div className=\"card mx-auto mt-5 p-2\" style={{width: '100%'}}>\n                <div className=\"card-body\">\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            <div className=\"text-end\">\n                                Tags <p className=\"badge bg-primary\">{quote.tags}</p>\n                            </div>\n                        </div>\n                    </div>\n                    <figure class=\"text-center\">\n                        <blockquote class=\"blockquote p-2 quote\">\n                            <p className=\"h4 fw-bold\" onClick={copyToClipboard}>\"{quote.content}\"</p>\n                        </blockquote>\n                        <figcaption class=\"blockquote-footer text-end\">\n                            <cite title=\"Source Title\">{quote.author}</cite>\n                        </figcaption>\n                    </figure>\n                    <div className=\"text-center\">\n                        <button className=\"btn btn-primary\" onClick={getNewQuote}>Get New Quote</button>\n                    </div>\n                </div>\n                <div className=\"card-footer bg-white\">\n                    <div className=\"row text-center\">\n                        <div className=\"col-md-6\">\n                            <p>Powered By <a className=\"text-decoration-none\" href=\"https://github.com/lukePeavey/quotable\" target=\"_blank\">quotable.io</a></p>\n                        </div>\n                        <div className=\"col-md-6\">\n                            <a className=\"text-decoration-none\" href=\"https://github.com/donymvarkey/random-quotes.git\" target=\"_blank\"><i className=\"bi-github fs-4\"></i></a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <ToastContainer />\n                    </div>\n                </div>\n                \n            </div>\n        </div>\n    )\n}\n","import './App.css';\nimport { NavBar, Quotes } from './components/index'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Quotes />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}